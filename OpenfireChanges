package org.jivesoftware.openfire.auth;

import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Types;

import javax.security.sasl.SaslException;
import javax.xml.bind.DatatypeConverter;

import org.jivesoftware.database.DbConnectionManager;
import org.jivesoftware.openfire.XMPPServer;
import org.jivesoftware.openfire.sasl.ScramSha1SaslServer;
import org.jivesoftware.openfire.user.UserNotFoundException;
import org.jivesoftware.util.JiveGlobals;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;


import com.google.auth.oauth2.GoogleCredentials;
import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.FirebaseApp;
import com.google.firebase.FirebaseOptions;
import com.google.firebase.auth.FirebaseAuthException;




import com.google.firebase.auth.FirebaseToken;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.logging.Level;
import org.dom4j.CharacterData;
import static org.jivesoftware.openfire.muc.MUCRole.Log;
import org.jivesoftware.openfire.user.DefaultUserProvider;
import org.jivesoftware.openfire.user.UserAlreadyExistsException;
import org.jivesoftware.openfire.user.UserManager;
import org.jivesoftware.openfire.user.UserNotFoundException;




/**
 *
 * @author cmmcm
 */
public class FirebaseAuthOpenF implements AuthProvider {
    
    
    private Boolean checkToken(String idToken){
        
        
        
        
        return true;
    }
    
    private void initFirebase() throws InternalUnauthenticatedException{
        
        if(FirebaseApp.getApps().isEmpty()){
                    try {
            FileInputStream refreshToken = null;
            try {
                refreshToken = new FileInputStream("C:\\Users\\cmmcm\\Desktop\\Firebase\\test-b319a-firebase-adminsdk-nnkft-c4a8259a29.json");
            } catch (FileNotFoundException ex) {
                java.util.logging.Logger.getLogger(FirebaseAuth.class.getName()).log(Level.SEVERE, null, ex);
                System.out.println("Failed opening the file");
                throw new InternalUnauthenticatedException(ex);
            }
            
            FirebaseOptions options = new FirebaseOptions.Builder()
                    .setCredentials(GoogleCredentials.fromStream(refreshToken))
                    .setDatabaseUrl("https://test-b319a.firebaseio.com")
                    .build();
            
            FirebaseApp.initializeApp(options);
            
        } catch (IOException ex) {
            java.util.logging.Logger.getLogger(FirebaseAuth.class.getName()).log(Level.SEVERE, null, ex);
            System.out.println("Failed I/O excpetion");
        }
        }

    }

    private static final String TEST_USER = "SELECT username FROM ofUser where username=?";
    @Override
    public void authenticate(String username , String idToken) throws UnauthorizedException, ConnectionException, InternalUnauthenticatedException {
        
         
        boolean isFirebaseUser = false;
        Connection con = null;
        PreparedStatement pstmt = null;
        ResultSet rs = null;
        
        if (username == null || idToken == null) {
            throw new UnauthorizedException();
        }
        
        username = username.trim().toLowerCase();
       
        if (username.contains("@")) {
            // Check that the specified domain matches the server's domain
            int index = username.indexOf("@");
            String domain = username.substring(index + 1);
            if (domain.equals(XMPPServer.getInstance().getServerInfo().getXMPPDomain())) {
                username = username.substring(0, index);
            } else {
                // Unknown domain. Return authentication failed.
                throw new UnauthorizedException();
            }
        }
        
      
        FirebaseToken decodedToken = null;
        try {
            decodedToken = FirebaseAuth.getInstance().verifyIdToken(idToken);
        } catch (FirebaseAuthException ex) {
            java.util.logging.Logger.getLogger(FirebaseAuthOpenF.class.getName()).log(Level.SEVERE, null, ex);
        }
        isFirebaseUser = true;
        // String uid = decodedToken.getUid();
        //check if they are a firebase user, if not throw an exception
        if(!isFirebaseUser){
            throw new UnauthorizedException("Error, User is not a Firebase user");
            
            
        } else if (!decodedToken.isEmailVerified()){
            throw new UnauthorizedException("Error, user did not verify email");
            
        }
        
        //check if the username is in the database, and if the user is not but they
        //are a valid Firebase user then create the user.
        if(isFirebaseUser){
            try {
            con = DbConnectionManager.getConnection();
            pstmt = con.prepareStatement(TEST_USER);
            pstmt.setString(1, username);
            rs = pstmt.executeQuery();
            if (!rs.next()) {
                DefaultUserProvider makeUser = new DefaultUserProvider();
                String name = decodedToken.getName();
                String email = decodedToken.getEmail();
                String password = decodedToken.getUid();
                makeUser.createUser(username, password, name, email);
            }
            }
        catch (SQLException sqle) {
            Log.error("User SQL failure:", sqle);
            throw new ConnectionException(sqle);
        }   catch (UserAlreadyExistsException ex) {
                java.util.logging.Logger.getLogger(FirebaseAuthOpenF.class.getName()).log(Level.SEVERE, null, ex);
            }
        finally {
            DbConnectionManager.closeConnection(rs, pstmt, con);
        }
        }
        //got this far without an exception, user must be valid

    }

    

    @Override
    public String getPassword(String username) throws UserNotFoundException, UnsupportedOperationException {
        return username;
//throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void setPassword(String username, String password) throws UserNotFoundException, UnsupportedOperationException {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public boolean supportsPasswordRetrieval() {
        return false;
//throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public boolean isScramSupported() {
        return false;
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public String getSalt(String username) throws UnsupportedOperationException, UserNotFoundException {
        return username;
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public int getIterations(String username) throws UnsupportedOperationException, UserNotFoundException {
        int i = 0;
        return i;
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public String getServerKey(String username) throws UnsupportedOperationException, UserNotFoundException {
        return username;
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public String getStoredKey(String username) throws UnsupportedOperationException, UserNotFoundException {
        return username;
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
    
//    private String generatePassayPassword() {
//    PasswordGenerator gen = new PasswordGenerator();
//    EnglishCharacterData lowerCaseChars = EnglishCharacterData.LowerCase;
//    CharacterRule lowerCaseRule = new CharacterRule(lowerCaseChars);
//    lowerCaseRule.setNumberOfCharacters(2);
// 
//    EnglishCharacterData upperCaseChars = EnglishCharacterData.UpperCase;
//    CharacterRule upperCaseRule = new CharacterRule(upperCaseChars);
//    upperCaseRule.setNumberOfCharacters(2);
// 
//    EnglishCharacterData digitChars = EnglishCharacterData.Digit;
//    CharacterRule digitRule = new CharacterRule(digitChars);
//    digitRule.setNumberOfCharacters(2);
// 
//
//    CharacterRule splCharRule = new CharacterRule((org.passay.CharacterData) specialChars);
//    splCharRule.setNumberOfCharacters(2);
// 
//    String password = gen.generatePassword(10, splCharRule, lowerCaseRule, 
//      upperCaseRule, digitRule);
//    return password;
//}
    
    
    
}
